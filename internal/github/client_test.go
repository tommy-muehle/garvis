package github

import (
	"context"

	"github.com/stretchr/testify/mock"
	origin "github.com/google/go-github/github"
)

// fakeClient is an autogenerated mock type for the Client type
type fakeClient struct {
	mock.Mock
}

// AddLabel provides a mock function with given fields: ctx, event, labels
func (_m *fakeClient) AddLabel(ctx context.Context, event *eventData, labels []string) error {
	ret := _m.Called(ctx, event, labels)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *eventData, []string) error); ok {
		r0 = rf(ctx, event, labels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveLabel provides a mock function with given fields: ctx, event, label
func (_m *fakeClient) RemoveLabel(ctx context.Context, event *eventData, label string) error {
	ret := _m.Called(ctx, event, label)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *eventData, string) error); ok {
		r0 = rf(ctx, event, label)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestReviewers provides a mock function with given fields: ctx, event, reviewers
func (_m *fakeClient) RequestReviewers(ctx context.Context, event *eventData, reviewers origin.ReviewersRequest) error {
	ret := _m.Called(ctx, event, reviewers)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *eventData, origin.ReviewersRequest) error); ok {
		r0 = rf(ctx, event, reviewers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReviewers provides a mock function with given fields: ctx, event
func (_m *fakeClient) DeleteReviewers(ctx context.Context, event *eventData) error {
	ret := _m.Called(ctx, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *eventData) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
